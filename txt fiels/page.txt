# Dynamic User Folder Management in Next.js

This implementation allows users to create, view, and navigate nested folder structures in your Next.js application.

## 1. State Management for Folders

First, let's create a folder data structure. We'll use React's state management to handle this:

```jsx
// components/FolderSystem/folderReducer.js
export const initialFolderState = {
  folders: {
    root: {
      id: 'root',
      name: 'Root',
      parentId: null,
      children: []
    }
  },
  currentFolder: 'root'
};

export const folderReducer = (state, action) => {
  switch (action.type) {
    case 'CREATE_FOLDER':
      const { id, name, parentId } = action.payload;
      const updatedFolders = {
        ...state.folders,
        [id]: {
          id,
          name,
          parentId,
          children: []
        }
      };
      
      // Add new folder as child of parent
      updatedFolders[parentId] = {
        ...updatedFolders[parentId],
        children: [...updatedFolders[parentId].children, id]
      };
      
      return {
        ...state,
        folders: updatedFolders
      };
      
    case 'NAVIGATE_TO_FOLDER':
      return {
        ...state,
        currentFolder: action.payload
      };
      
    case 'DELETE_FOLDER':
      const folderId = action.payload;
      const parentFolderId = state.folders[folderId].parentId;
      
      // Create copy of folders state
      const newFolders = { ...state.folders };
      
      // Remove folder from parent's children
      newFolders[parentFolderId] = {
        ...newFolders[parentFolderId],
        children: newFolders[parentFolderId].children.filter(id => id !== folderId)
      };
      
      // Delete the folder
      delete newFolders[folderId];
      
      return {
        ...state,
        folders: newFolders,
        currentFolder: state.currentFolder === folderId ? parentFolderId : state.currentFolder
      };
      
    default:
      return state;
  }
};
```

## 2. Creating a Folder Context

```jsx
// components/FolderSystem/FolderContext.js
import { createContext, useContext, useReducer } from 'react';
import { folderReducer, initialFolderState } from './folderReducer';

const FolderContext = createContext();

export const useFolders = () => {
  return useContext(FolderContext);
};

export const FolderProvider = ({ children }) => {
  const [state, dispatch] = useReducer(folderReducer, initialFolderState);
  
  const createFolder = (name, parentId) => {
    const id = `folder-${Date.now()}`;
    dispatch({
      type: 'CREATE_FOLDER',
      payload: { id, name, parentId }
    });
    return id;
  };
  
  const navigateToFolder = (folderId) => {
    dispatch({
      type: 'NAVIGATE_TO_FOLDER',
      payload: folderId
    });
  };
  
  const deleteFolder = (folderId) => {
    dispatch({
      type: 'DELETE_FOLDER',
      payload: folderId
    });
  };
  
  return (
    <FolderContext.Provider value={{ 
      folders: state.folders,
      currentFolder: state.currentFolder,
      createFolder,
      navigateToFolder,
      deleteFolder
    }}>
      {children}
    </FolderContext.Provider>
  );
};
```

## 3. Creating UI Components for the Folder System

### Folder View Component

```jsx
// components/FolderSystem/FolderView.js
import { useState } from 'react';
import { useFolders } from './FolderContext';

export default function FolderView() {
  const { folders, currentFolder, navigateToFolder, createFolder, deleteFolder } = useFolders();
  const [newFolderName, setNewFolderName] = useState('');
  
  const currentFolderData = folders[currentFolder];
  const childFolders = currentFolderData.children.map(id => folders[id]);
  
  const handleCreateFolder = (e) => {
    e.preventDefault();
    if (newFolderName.trim()) {
      createFolder(newFolderName, currentFolder);
      setNewFolderName('');
    }
  };
  
  const renderBreadcrumb = () => {
    const breadcrumbs = [];
    let current = currentFolderData;
    
    while (current) {
      breadcrumbs.unshift(current);
      current = current.parentId ? folders[current.parentId] : null;
    }
    
    return (
      <div className="flex items-center space-x-2 mb-4">
        {breadcrumbs.map((folder, i) => (
          <div key={folder.id} className="flex items-center">
            {i > 0 && <span className="mx-2">/</span>}
            <button 
              className="hover:underline text-blue-500"
              onClick={() => navigateToFolder(folder.id)}
            >
              {folder.name}
            </button>
          </div>
        ))}
      </div>
    );
  };
  
  return (
    <div className="p-4">
      {renderBreadcrumb()}
      
      <div className="mb-4">
        <form onSubmit={handleCreateFolder} className="flex space-x-2">
          <input
            type="text"
            value={newFolderName}
            onChange={(e) => setNewFolderName(e.target.value)}
            placeholder="New folder name"
            className="border p-2 rounded"
          />
          <button 
            type="submit" 
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Create Folder
          </button>
        </form>
      </div>
      
      {currentFolderData.parentId && (
        <div 
          className="flex items-center p-2 mb-2 cursor-pointer hover:bg-gray-100 rounded"
          onClick={() => navigateToFolder(currentFolderData.parentId)}
        >
          <span className="mr-2">‚¨ÜÔ∏è</span>
          <span>Up to parent folder</span>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {childFolders.map(folder => (
          <div 
            key={folder.id} 
            className="border rounded p-4 flex justify-between items-center"
          >
            <div 
              className="flex items-center cursor-pointer flex-grow"
              onClick={() => navigateToFolder(folder.id)}
            >
              <span className="mr-2">üìÅ</span>
              <span>{folder.name}</span>
            </div>
            <button 
              onClick={(e) => {
                e.stopPropagation();
                deleteFolder(folder.id);
              }}
              className="text-red-500 hover:text-red-700"
            >
              Delete
            </button>
          </div>
        ))}
        
        {childFolders.length === 0 && (
          <div className="col-span-3 text-gray-500 text-center py-8">
            This folder is empty. Create a new folder to get started.
          </div>
        )}
      </div>
    </div>
  );
}
```

## 4. Implementing in a Next.js Page

```jsx
// app/folder-manager/page.js (for App Router)
'use client';

import { FolderProvider } from '../../components/FolderSystem/FolderContext';
import FolderView from '../../components/FolderSystem/FolderView';

export default function FolderManagerPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Folder Manager</h1>
      <FolderProvider>
        <FolderView />
      </FolderProvider>
    </div>
  );
}
```

## 5. Persistent Storage

To make folders persist, you can use localStorage, a database, or an API. Here's a localStorage implementation:

```jsx
// components/FolderSystem/FolderContext.js (updated)
import { createContext, useContext, useReducer, useEffect } from 'react';
import { folderReducer, initialFolderState } from './folderReducer';

const FolderContext = createContext();

export const useFolders = () => {
  return useContext(FolderContext);
};

export const FolderProvider = ({ children }) => {
  // Load from localStorage if available
  const loadInitialState = () => {
    if (typeof window !== 'undefined') {
      const savedState = localStorage.getItem('folderSystem');
      return savedState ? JSON.parse(savedState) : initialFolderState;
    }
    return initialFolderState;
  };

  const [state, dispatch] = useReducer(folderReducer, null, loadInitialState);
  
  // Save to localStorage when state changes
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('folderSystem', JSON.stringify(state));
    }
  }, [state]);
  
  // ... rest of the context remains the same
}
```

## 6. Database Integration

For real production applications, you should store folder structures in a database. Here's a high-level example using a REST API:

```jsx
// services/folderApi.js
export const getFolders = async () => {
  const response = await fetch('/api/folders');
  return response.json();
};

export const createFolder = async (name, parentId) => {
  const response = await fetch('/api/folders', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ name, parentId })
  });
  return response.json();
};

export const deleteFolder = async (folderId) => {
  await fetch(`/api/folders/${folderId}`, {
    method: 'DELETE'
  });
};
```

And the API route implementation:

```jsx
// app/api/folders/route.js (Next.js App Router)
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma'; // Assuming you're using Prisma

export async function GET() {
  try {
    const folders = await prisma.folder.findMany();
    return NextResponse.json(folders);
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function POST(request) {
  try {
    const { name, parentId } = await request.json();
    
    const folder = await prisma.folder.create({
      data: {
        name,
        parent: parentId ? { connect: { id: parentId } } : undefined
      }
    });
    
    return NextResponse.json(folder);
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
```

```jsx
// app/api/folders/[id]/route.js
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function DELETE(request, { params }) {
  try {
    await prisma.folder.delete({
      where: { id: params.id }
    });
    
    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
```

## 7. Prisma Schema (for Database Integration)

```prisma
// prisma/schema.prisma
model Folder {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Self-relation for folder hierarchy
  parentId    String?
  parent      Folder?   @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]  @relation("FolderToFolder")
  
  // You can also add user relation to track folder ownership
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  // other user fields
  folders   Folder[]
}
```

This schema allows for nested folders and tracking which user owns each folder.